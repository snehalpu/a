/**
 * jQuery Bar Rating Plugin v1.2.2 (Modified by Paawan Srivastava 2018-02-12)
 *
 * http://github.com/antennaio/jquery-bar-rating
 *
 * Copyright (c) 2012-2016 Kazik Pietruszewski
 *
 * This plugin is available under the MIT license.
 * http://www.opensource.org/licenses/mit-license.php
 */
!function (t) { "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof module && module.exports ? module.exports = t(require("jquery")) : t(jQuery) }(function (t) { var e = function () { function e() { var e = this, n = function (n) { return t.isNumeric(n) && (n = Math.floor(n)), t('option[value="' + n + '"]', e.$elem) }, a = function (t) { var n = e.$elem.data("barrating"); return void 0 !== t ? n[t] : n }, i = function (t, n) { null !== n && "object" == typeof n ? e.$elem.data("barrating", n) : e.$elem.data("barrating")[t] = n }, r = function () { var a, r, o = (a = e.options.initialRating) ? n(a) : t("option:selected", e.$elem), l = !(r = e.$elem.find('option[value="' + e.options.emptyValue + '"]')).length && e.options.allowEmpty ? (r = t("<option />", { value: e.options.emptyValue })).prependTo(e.$elem) : r, s = o.val(), u = o.data("html") ? o.data("html") : o.text(), d = null !== e.options.allowEmpty ? e.options.allowEmpty : !!l.length, g = l.length ? l.val() : null, c = l.length ? l.text() : null; i(null, { userOptions: e.options, ratingValue: s, ratingText: u, originalRatingValue: s, originalRatingText: u, allowEmpty: d, emptyRatingValue: g, emptyRatingText: c, readOnly: e.options.readonly, ratingMade: !1 }) }, o = function () { return a("ratingText") }, l = function () { return a("ratingValue") }, s = function () { return a("userOptions").reverse ? "nextAll" : "prevAll" }, u = function (t) { n(t).prop("selected", !0), a("userOptions").triggerChange && e.$elem.change() }, d = function (t) { e.options.useOptionTextForShowSelectedRating && (t = n(t || a("ratingValue")).text()), (t = t || o()) == a("emptyRatingText") && (t = ""), e.options.showSelectedRating && e.$elem.parent().find(".br-current-rating").text(t) }, g = function () { e.$widget.find("a").removeClass(function (t, e) { return (e.match(/(^|\s)br-\S+/g) || []).join(" ") }) }, c = function () { var n, i, r, o = e.$widget.find('a[data-rating-value="' + l() + '"]'), u = a("userOptions").initialRating, d = t.isNumeric(l()) ? l() : 0, c = (n = u, Math.round(Math.floor(10 * n) / 10 % 1 * 100)); if (g(), o.addClass("br-selected br-current")[s()]().addClass("br-selected"), !a("ratingMade") && t.isNumeric(u)) { if (u <= d || !c) return; i = e.$widget.find("a"), (r = o.length ? o[a("userOptions").reverse ? "prev" : "next"]() : i[a("userOptions").reverse ? "last" : "first"]()).addClass("br-fractional"), r.addClass("br-fractional-" + c) } }, p = function (n) { n.on("click.barrating", function (n) { var r, s, g, p = t(this), f = a("userOptions"); return n.preventDefault(), r = p.attr("data-rating-value"), s = p.attr("data-rating-text"), g = p, a("allowEmpty") && a("userOptions").deselectable && l() == g.attr("data-rating-value") && (r = a("emptyRatingValue"), s = a("emptyRatingText")), i("ratingValue", r), i("ratingText", s), i("ratingMade", !0), u(r), d(s), c(), f.onSelect.call(e, l(), o(), n), !1 }) }, f = function (n) { p(n), e.options.hoverState && (n.on("mouseenter.barrating", function () { var e = t(this); g(), e.addClass("br-active")[s()]().addClass("br-active"), d(e.attr("data-rating-text")) }), e.$widget.on("mouseleave.barrating blur.barrating", function () { d(), c() })) }, h = function (t) { t.off(".barrating") }, m = function (n) { var i = e.$widget.find("a"); a("userOptions").fastClicks && i.on("touchstart.barrating", function (e) { e.preventDefault(), e.stopPropagation(), t(this).click() }), n ? (h(i), i.on("click.barrating", function (t) { t.preventDefault() })) : f(i) }; this.show = function () { var n, i; a() || (n = ["br-wrapper"], "" !== e.options.theme && n.push("br-theme-" + e.options.theme), e.$elem.wrap(t("<div />", { class: n.join(" ") })), r(), e.$widget = (i = t("<div />", { class: "br-widget" }), e.$elem.find("option").each(function () { var n, r, o, l; (n = t(this).val()) !== a("emptyRatingValue") && (r = t(this).text(), (o = t(this).data("html")) && (r = o), l = t("<a />", { href: "#", "data-rating-value": n, "data-rating-text": r, html: e.options.showValues ? r : "" }), i.append(l)) }), e.options.showSelectedRating && i.append(t("<div />", { text: "", class: "br-current-rating" })), e.options.reverse && i.addClass("br-reverse"), e.options.readonly && i.addClass("br-readonly"), i), e.$widget.insertAfter(e.$elem), c(), d(), m(e.options.readonly), e.$elem.hide()) }, this.readonly = function (t) { "boolean" == typeof t && a("readOnly") != t && (m(t), i("readOnly", t), e.$widget.toggleClass("br-readonly")) }, this.set = function (t) { var n = a("userOptions"); 0 !== e.$elem.find('option[value="' + t + '"]').length && (i("ratingValue", t), i("ratingText", e.$elem.find('option[value="' + t + '"]').text()), i("ratingMade", !0), u(l()), d(o()), c(), n.silent || n.onSelect.call(this, l(), o())) }, this.clear = function () { var n = a("userOptions"); i("ratingValue", a("originalRatingValue")), i("ratingText", a("originalRatingText")), i("ratingMade", !1), t("option", e.$elem).prop("selected", function () { return this.defaultSelected }), a("userOptions").triggerChange && e.$elem.change(), d(o()), c(), n.onClear.call(this, l(), o()) }, this.destroy = function () { var t = l(), n = o(), i = a("userOptions"); h(e.$widget.find("a")), e.$widget.remove(), e.$elem.removeData("barrating"), e.$elem.unwrap(), e.$elem.show(), i.onDestroy.call(this, t, n) } } return e.prototype.init = function (e, n) { return this.$elem = t(n), this.options = t.extend({}, t.fn.barrating.defaults, e), this.options }, e }(); t.fn.barrating = function (n, a) { return this.each(function () { var i = new e; if (t(this).is("select") || t.error("Sorry, this plugin only works with select fields."), i.hasOwnProperty(n)) { if (i.init(a, this), "show" === n) return i.show(a); if (i.$elem.data("barrating")) return i.$widget = t(this).next(".br-widget"), i[n](a) } else { if ("object" == typeof n || !n) return a = n, i.init(a, this), i.show(); t.error("Method " + n + " does not exist on jQuery.barrating") } }) }, t.fn.barrating.defaults = { theme: "", initialRating: null, allowEmpty: null, emptyValue: "", showValues: !1, showSelectedRating: !0, useOptionTextForShowSelectedRating: !1, deselectable: !0, reverse: !1, readonly: !1, fastClicks: !0, hoverState: !0, silent: !1, triggerChange: !0, onSelect: function (t, e, n) { }, onClear: function (t, e) { }, onDestroy: function (t, e) { } }, t.fn.barrating.BarRating = e });